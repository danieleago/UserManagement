openapi: 3.0.1
info:
  title: User management
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8081/management
tags:
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  /user:
    get:
      tags:
        - user
      summary: Get user list
      operationId: getUserList
      parameters:
        - name: keyword
          in: query
          description: 'search an user by name and/or surname'
          required: false
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: Invalid search parameter
          content: {}
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
    put:
      tags:
        - user
      summary: Updated user
      operationId: updateUser
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/upload:
    post:
      tags:
        - user
      summary: Creates list of users by given csv file
      operationId: userListUpload
      requestBody:
        description: List of user object
        content:
          text/csv:
            schema:
              type: string
              format: binary
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Malformatted file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/{id}:
    get:
      tags:
        - user
      summary: Get user by id
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: 'user id'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - user
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: 'user id'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content: {}
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
          maxLength: 50
        lastName:
          type: string
          maxLength: 50
        email:
          type: string
          maxLength: 100
        address:
          type: string
          maxLength: 200
      xml:
        name: User
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string